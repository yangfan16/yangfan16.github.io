<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>美国十年签证申请总结</title>
    <url>/travel/apply-us-visa/</url>
    <content><![CDATA[<blockquote>
<p>很久以来，我一直有三个愿望，名校，出国，名企。 现在正一步步实现自己的这三个愿望,出国首站就选择了美帝，现在想来无疑是作大死，当然，最终签证没能办下来。</p>
</blockquote>
<p>去年的时候女友终于毕业了，再加上刚工作，一直想要出国去看看更大的世界，恰好16年12月的时候朋友告诉我飞猪上17年五一 北京直飞三藩的来回机票双人只需要7000多大洋，一时头脑冲动就买了，在朋友的提醒下也购买了拒签险，最终准备也不是很充分，也因为一些其他客观原因，最终没有将美帝签证拿到手，把过程记录下来，自己以后再申请也罢，给别人参考也行。</p>
<a id="more"></a>

<blockquote>
<p>Ps: 这是我17年3月写的,18年7月迁移到我的博客，离本文记录时间已经过去了一段时间，请谨慎参考。</p>
</blockquote>
<h2 id="申请预约过程"><a href="#申请预约过程" class="headerlink" title="申请预约过程"></a>申请预约过程</h2><p>美国签证可以选择自己办理，也可以交给第三方旅行社，但实际上他们也就是帮你去交个钱，翻译下DS-160表格和一些旅行模板，如果自己有中信银行储蓄卡的话完全可以自己来，具体流程如下：</p>
<p>美帝签证官网地址：<a href="http://www.ustraveldocs.com/cn_zh/cn-niv-visaapply.asp" target="_blank" rel="noopener">http://www.ustraveldocs.com/cn_zh/cn-niv-visaapply.asp</a></p>
<p>填写DS-160表格  需要先准备好上传一张2寸的正方形的签证照片，系统会自动验证照片是否符合规格,填写基本账号信息完毕之后，进入冗长的详细资料填写阶段。前后大概七八页，从基本资料，工作经历，教育经历，出境经历，旅途行程安排，犯罪违法情况都需要填写。对了，都是英文！</p>
<p>行程酒店安排可以提前在Google, Booking 或者Airbnb 上预定选择你要去的美帝城市酒店，填酒店上面的英文联络方式就好了，最好自己在填写表格之前先写一份比较详尽的旅行路线规划，反正到时候面试你也是需要这个的。</p>
<p>填写完表格之后，会生成一个有唯一编号的DS-160表格，然后再缴费预约面试时间、地点。一开始会让你选择你要选择面签的城市，中国地区有北京、上海、广州、成都、香港等地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ps:不仅得把自己过去的学校、公司的名称、地址中英文都得翻译一遍，还得把准备第一次去美国的行程、入住酒店的信息和联络方式都填写一遍</span><br><span class="line">pps:填写表格，网站有超时限制，过长时间没填完，就会登出，随时点击sava保存当前表格是王道</span><br><span class="line">ppps: 不要选错面试城市，否则会非常麻烦</span><br></pre></td></tr></table></figure>

<p>如果这个做完了，基本网上预约部分就完成了，我花了一天时间，非常详尽的翻译了两个人的信息，然后飞快的在网上填写，然后填完一个人的信息之后放弃了，因为美签在线支付费用要通过中信银行借记卡，在线商城扣款, 大约160刀。 嗯， 我没有中信银行的储蓄卡，于是在飞猪上找了百程旅游帮我办理签证，一个人1298，因为两人都是护照都是白本，拒签不退款，讲真，到这个时候我是有点后悔的。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ps:网上很多信息说是旅行社的翻译非常扯淡，基本都是机翻，如果英语还好且持有中信银行借记卡又不怕麻烦的话还是可以自己申请的，百程自己说是有电话培训，结果其实就是面签前一天下午打电话通知下面试时间，以及他在哪里给我资料，什么培训都没有。当然，其实旅游签也的确不需要培训什么。</span><br></pre></td></tr></table></figure>

<h2 id="面签过程"><a href="#面签过程" class="headerlink" title="面签过程"></a>面签过程</h2><p>网上缴费后会预约面试的时间和地点，如果是第三方旅行社的话都是可以修改面试时间的。由于懒癌和其他一些原因16年一直没有预约，直到川普上台后才申请的，很神奇的预约到了3月10日，然后在朋友的催促下给旅行社打电话改到了3月1号，不幸的是川普上台后禁止一些国家人民进入美国，旅行社也说这个时间拒签风险很高，白本拒签更高，但也没什么办法了，骑虎难下啊，机票又不能改签或者退掉。</p>
<h3 id="面签准备资料"><a href="#面签准备资料" class="headerlink" title="面签准备资料"></a>面签准备资料</h3><p>1.护照<br>2.DS-160表格和面签预约单<br>3.行程单（自己做一个旧金山出发的西海岸游玩行程单）<br>4.户口本<br>5.在职和收入的中英文证明(公司HR盖公章，领导签字)<br>6.公司营业执照复印件<br>7.一年银行流水(招商银行柜台打印)<br>8.学历证明（毕业证、学位证）</p>
<h3 id="面签补充"><a href="#面签补充" class="headerlink" title="面签补充"></a>面签补充</h3><p>预约的是早上九点的，且我住的地方离亮马桥尚有一段距离，早上五点半就起床了，到了美帝领事馆之后发现预约的时间更早的人已经排起了长龙，前面有一个存包的地方，大包五十小包二十，旅行社的人就在那里把面签预约单给了我。然后就去美领馆外面排队，申请美签的人真的好多啊，而且更坑爹的不时有人从后面挤上来给说他来晚了，着急进美领馆面签，顺便踩你一两脚。三月北京的寒风像是青龙偃月刀，在冷风中瑟瑟发抖了一个小时之后终于进了美领馆。进入不得携带任何电子设备，据说腕表也不得携带，所有资料都装在一个透明的塑料文件袋中。初次安检将预约单给门口的保安，然后排队进入美领馆办公室，进入之后又过了一次安检，将外套摘了后连同资料放入一个蓝色的框子中，然后接着在里面排队。然后有工作人员扫描预约单上的条纹码，确认无误后放行，后面有两个工作人员，分别检查了DS-160表格，查看护照，并且在护照上面贴了新条纹码。接着就是排队打指纹，是美国人负责，在类似老旧的银行柜台那边，把护照贴在玻璃上指定位置，工作人员扫描了一下，第一次记录左右手四根拇指，第二次记录左右大拇指。最后排队面签。</p>
<h3 id="面签问题"><a href="#面签问题" class="headerlink" title="面签问题"></a>面签问题</h3><p>旅游签都是使用中文交流，也是那种老旧的银行柜台，工作人员在里面，我和女友一起的，面试官的声音略小，我没太听清，和女友都有点紧张，也没有说什么，我的面签官就问了下面几个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Q:你们去美国做什么？</span><br><span class="line">A:旅游  (女友答的，我有点发呆)</span><br><span class="line"></span><br><span class="line">Q:你们去哪里？</span><br><span class="line">A:旧金山 （还是女友答的，我还在持续发呆中，也没有听清）</span><br><span class="line"></span><br><span class="line">Q:把你们的结婚证给我看下</span><br><span class="line">A:嗯？？？？？（这次我们两都没听清）</span><br><span class="line">Q:结婚证</span><br><span class="line">A:我们还没结婚，是情侣。</span><br><span class="line"></span><br><span class="line">Q:有房吗？</span><br><span class="line">A:还没有房，我们刚毕业，还没有买房（我答）</span><br><span class="line"></span><br><span class="line">Q:之前去过哪里？</span><br><span class="line">A:我之前去过香港，这是我们第一次准备出国玩（我答）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Q:身份证给我看下</span><br><span class="line">A:嗯？？？？？（依旧没听清）</span><br><span class="line">Q:身份证</span><br><span class="line">我们两把身份证递给了面签官</span><br><span class="line"></span><br><span class="line">然后面签官说sorry,我不能给你们签证，然后把身份证还给我们，并递给我一张白色的拒签单。整个过程面签官根本就没有看准备的那么多资料。有点沮丧。</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>办理签证之前，我还特意打电话给我们leader询问好办理吗，他们都说在北京有份很稳定的工作是非常容易的，自己也没认真做准备。面签也发挥的不好，也有朋友说最好自己单独面试，也有说因为没房没结婚的，也有说白本原因的。但结果的确是非常遗憾没能申请到美帝十年签证，但是还好的是当时购买机票时候选择购买拒签险，拒签后保险公司将机票全部进行了理赔，速度也很不错，如果以后再有机会再来一次吧。</p>
]]></content>
      <categories>
        <category>travel</category>
      </categories>
      <tags>
        <tag>travel</tag>
      </tags>
  </entry>
  <entry>
    <title>端午上海苏州游记</title>
    <url>/travel/travel-sh-note/</url>
    <content><![CDATA[<blockquote>
<p>结婚以来，一直都各种忙，没有时间出去，也没有做什么事情，没有读什么书，非常惭愧。倒是在上海玩的特别开心，仅做小记。</p>
</blockquote>
<p>可能是结婚后一直没有出去玩，各种压力有点大，领导听她的同事说有个VueConf的票去不了，然后她就转手买了下来，留下我一脸黑人问号，想了想就觉得去上海玩玩也行，正好趁端午，去之后还遇到了同事，想来也是挺神奇的。 五天四晚上海之行就迪士尼玩的最嗨皮。</p>
<a id="more"></a>

<blockquote>
<p>Ps: 这是我19年6月写的,之前域名过期，重新折腾了一下博客，离本文记录时间已经过去了一段时间，请谨慎参考。</p>
</blockquote>
<h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><p> 总共去了五天四晚，临时起意去苏州玩了一天，剩下领导开了一天的会，我去了上海野生动物园，外滩玩了一天半，迪士尼玩了两天，很开心，迪士尼是个不错的地方，可能也因为我没有长大。</p>
<h3 id="6月7日"><a href="#6月7日" class="headerlink" title="6月7日"></a>6月7日</h3><p>领导买的票是7点的，早上四点三十分就起床, 五点三十分打车前往北京南站，虽然是节假日，早上7点到达北京南还是全程特别通畅, 乘坐G5次复兴号高铁出发前往上海，历时四小时40分钟 在当天中午11点四十到达上海站。 我们两都是第一次坐复兴号，刚上去还挺激动的，像个好奇宝宝，研究了半天也没看出来与和谐号有什么特别本质的区别，没过一会就困得不行了。</p>
<p>在6号就提前收拾好了行李，买好7号的早餐，结果早餐忘了吃了；看了上海的天气，带了一把遮阳伞，一把雨伞，随身的行李拉了一个拉杆箱，明明取了纸质票，拿身份证给刷进去乘车了，纸质票都想不起来扔哪里了。</p>
<p>快到南京的时候，斜对面座位有两个女生，也是出来玩的，突然临时起意，说是去南京玩半天，下午或者晚上再从南京坐车到上海酒店。我和领导当时就震惊了，还有这种操作？ 我们两个心里也痒痒，商量要不也从南京下车，先看看金陵景色，后来想到基友还在上海站说要接我，还有点担心买不到晚上回上海的车票。</p>
<p>11点四十到上海车站后基友说他还在路上，得半个多小时，我们提前在手机上下载了《上海地铁metro大都会》 下了高铁之后还得先出站去地面，然后再下到地铁站，上海站应该是比较久远了，很小，很旧，也是脏乱差。在上海站对面乘坐的地铁1号线，到人民广场和基友约定会师，我们到了之后等了十来分钟，基友还没到，眼看领导就要冲着香奈儿店进去压压惊了，谢天谢地，基友终于到了，一个在上海工作了四年的人，给我打电话问我他下了地铁该怎么走，去哪个口？ 我一瞬间有点恍惚，感觉是个坑。</p>
<p>在人民广场吃的饭，之前看游记说这个如何如何好，旧上海的风格巴拉巴拉的，我不太喜欢，那地铁的闸机口好像跟我有仇，出去之后觉得像是老校区的宿舍，破破烂烂的，来之前在大众点评上找了一个好评最多的火锅《老灶福大刀腰片火锅店》 离地铁站也不近，芝麻酱我看了一眼就放弃了，领导也放弃了，服务态度也不行，火锅做的也一般，事实证明：不要在上海吃重庆火锅！！！！  为国民生产总值贡献了230人民币，基友付了账。</p>
<p>从人民广场乘2号线区酒店，地铁站的闸机还是不肯放过我，到陆家嘴下地铁，走了十来分钟终于到酒店了，这个时候都快累死了。出发前半个多月在招行300+上订了上海凯宾斯基的酒店，订了三晚的一个江景房，一晚上八百，说是江景，黄浦江只能看到的是很小的一部分，有点后悔没有订文华东方或者江对面的W酒店。酒店一般，服务也一般，办理入住很慢，也挺混乱，领导和基友完全没有地方休息，就在大堂干等着办理手续，真的差极了！</p>
<p>本来预计两点就能出去玩的，结果办理完入住，放完行李都快四点半了，领导其实都已经不想动了，还是坚持陪我和基友在外滩逛了逛，去南京路转了转，在南京路就看见了银银银，一家店都没进去，我和领导都不太喜欢往人堆里挤 非常的不适应。很快就走完了整个南京路，据说是东方时代广场，暗下决心以后去纽约坚决不去时代广场。  然后在酒店对面的外滩转了转，买了一个江底隧道的门票，一个人五十好像，基友说他也没坐过，结果就是三个人齐齐感到上当受骗，就很简单的隧道上挂了很简陋的LED灯管，既不真实，也不漂亮，一个车里面大概十个人吧，本来其他人还兴致冲冲的在前面拍照，领导不合时宜的说了一句：这不就是花五十块钱坐了个地铁吗？还没人地铁的广告好看，拍照的人瞬间就把手机收了起来，然后互相尴尬一笑。</p>
<p> 在外滩附近找个吃的超级难，在正大广场等了好久，终于在小南国吃了顿饭，感觉不如北京小南国，而且可能因为人多，根本没人理，服务很差。中途吃饭的时候一直打游戏，领导提醒，还把领导说了一嘴，惹领导生气了，非常不该的，以后出去玩，坚决不犯这样的错误。</p>
<p> 晚上刷盆友圈还看到有同事定位在东方明珠，一瞬间就觉得这个世界太小了吧，问了一嘴原来也是来参加VueConf大会的，再问人家说她的票是公司给的😐</p>
<h3 id="6月8日"><a href="#6月8日" class="headerlink" title="6月8日"></a>6月8日</h3><p> 早上六点就起床，起床就感觉可能晚了，早餐就没在凯宾斯基吃，据说凯宾斯基的早餐还可以，打车送领导到交通大学徐汇校区的vueConf,在校门口找了家庆丰包子铺，谁敢相信我从北京去上海吃庆丰包子。 领导去参加VueConf后，打电话叫基友一起去上海野生动物园，结果基友还没睡醒，我就先从徐汇出发，到野生动物园后等了会儿就买了票进去了，上海野生动物园据说是全国最大的野生动物园，读书那会儿领导一直喊着要去秦岭野生动物园，没想到来的第一个野生动物园居然是这里，领导还没来成😂，动物园不错。</p>
<h3 id="6月9日"><a href="#6月9日" class="headerlink" title="6月9日"></a>6月9日</h3><blockquote>
<p>临时起意想去苏州玩</p>
</blockquote>
<p>8号晚上买了去苏州的票，苏州基本就是冲着园林去，拙政园约了时间但是赶不上了，留园人少，精美，适合拍照，狮子林人超级多，可能是因为端午最后一天吧，苏博根本就约不到，之前也没准备来苏州玩，压根就没什么准备，倒是去了几个没什么名气的小的园林，感觉和天津的瓷房子倒是可以一起看。在从狮子林出来之后 根据大众点评的欢迎度，走了超长的路，吃了一个特别难吃的松鼠鱼，服务态度极其恶劣，在北京几年，从来没见过这样做生意的，可能也是因为我极少在北京景点吃饭。下午去金鸡湖随便看了看，超级热，来的时候又没什么人，坐不了船。等稍微凉爽了点，凑了十来个人，终于开船送我们到桃花岛上喂了点蚊子，五点多就匆匆往上海赶。可能是因为小时候课本里对苏州园林的渲染过于美好，我对苏州之行颇感失望，也可能从农村成长，不是很能理解这种园林之美。</p>
<h3 id="6月10日"><a href="#6月10日" class="headerlink" title="6月10日"></a>6月10日</h3><blockquote>
<p>买了迪士尼两日联票 但连续三天,实在是有点累了</p>
</blockquote>
<p>一瞬间都有点想上几天班休息一下了，早上起床后酒店的早餐的停止供应了，去买了点小杨生煎，领导吃了一个，我吃了半个，实在是不太喜欢。退了酒店之后就打车去万怡酒店，同样是招行300+精选，当时老眼昏花，而且被招行文案欺骗了，招行说他们的300+精选酒店都是五星级的，万怡酒店那里又写着万豪旗下，一直以为我订的是万豪酒店🙄  晚上回到酒店才发现呵呵哒。行李寄存到酒店后直接打车去了迪士尼，都快下午了，不知道为什么还有很多人在门口排队，下午刚进去就看到2点的花车，然后就忘了抢FP，事实是其实也没什么好项目的FP了，领导在急速光轮之后还想再玩，女生玩过山车真可怕！ 感觉我们第一天像是在试游玩，晚上灯光焰火秀也去的比较晚。</p>
<h3 id="6月11日"><a href="#6月11日" class="headerlink" title="6月11日"></a>6月11日</h3><p>养精蓄锐之后，我们11号玩的很疯，抢了飞越地平线和雷鸣山漂流的FP,然后买了一堆的FP，基本上除了《创》 剩下都玩了两三遍，加勒比海盗那个更是玩了五遍，迪士尼确实擅长造梦，欢乐谷给人的氛围是刺激，迪士尼则是另外一种。最惨的就是绳索挑战，之前领导给我和她买了特别厚实的雨衣雨靴，雷鸣山漂流玩之后扔掉的都觉得好可惜，也没溅到什么水，当时还很好奇一个男游客裤子、上衣全部湿透是怎么玩的漂流，能有这么多水； 绳索挑战的一条路线有个瀑布，得从旁边的峭壁上抓着石头横渡过去，领导有点害怕，抱着岩石不肯往前走，我在后面鼓励领导，然后瀑布的水哐哐的浇我，领导抱着石头大声的喊，后面一对小情侣笑得都站不起来了。走完之后我就意识到我应该是当天全园区获得瀑布最多的男人。 后续两次玩这个项目就没再敢走这条路线。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>迪士尼挺好玩，也挺贵，里面一个披萨198(还是298来着？) ，我们吃了两个没吃饱😒 上海有很多很不错的地方，陆家嘴值得去看看，苏州也挺好，有机会再去南京杭州看看吧！</p>
]]></content>
      <categories>
        <category>travel</category>
      </categories>
      <tags>
        <tag>travel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub Actions 自动构建部署Hexo博客</title>
    <url>/hexo/use-actions-github/</url>
    <content><![CDATA[<blockquote>
<p>之前一直在使用Travis-CI部署Hexo博客,博客的源文件一直都在私有仓库中，只能只用<a href="https://travis-ci.com/" target="_blank" rel="noopener">https://travis-ci.com/</a>, 眼看自己的100次机会很快就要用完了，Github<br>发布Github Actions了， 就简单折腾了一些时间，现在也使用了一段时间了 分享下我的使用过程</p>
</blockquote>
<p>我个人比较坚持将代码尽可能的分离，<a href="https://blog.yangfan16.cn/hexo/use-sub-theme/">参考我的上一篇博客使用Git Submdule 分离Hexo主题</a>。 另外，<br>Hexo和NexT配置文件中包含一些不太适合公开的信息，比如leancloud的AK SK , 还有一些ApplicationID等等。这两个部分在我使用Github-actions的过程中造成了不少使用上的麻烦，解决的过程我尽可能详细的在文章中记录下来，方便下次查阅。</p>
<a id="more"></a>

<blockquote>
<p>Ps: <a href="https://xirikm.net/" target="_blank" rel="noopener">感谢xirikm博主的邮件答复和耐心解惑</a></p>
</blockquote>
<h2 id="关于GitHub-Actions"><a href="#关于GitHub-Actions" class="headerlink" title="关于GitHub Actions"></a>关于GitHub Actions</h2><p>GitHub Actions 是Github推出的又一款持续继承服务，功能类似于Travis-CI,但是直接与Github集成，可以在github页面直接查看构建和部署的过程，方便不少。<br>还有就是我的博客源文件仓库是私有仓库，只能免费使用Travis-ci.com构建一百次。 要想使用travis-ci.org还必须得公有仓库，Actions倒是没有这方面的条件。<br>此外 <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Github还推出了一个Actions MarketPlace</a>, 里面包含了不少他人提交的Actions; <a href="https://github.com/sdras/awesome-actions" target="_blank" rel="noopener">还有人搞了一个<br>awesome</a> 这就免去了重复写actions的过程。</p>
<p>官方文档给出了非常详解的解释和用例，<a href="https://help.github.com/en/actions" target="_blank" rel="noopener">具体请移步这里</a> , 中文文档翻译的稀碎，我英文不太好，还是有选择的看了些英文的文档。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li><em>workflow</em> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li>
<li><em>job</em> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。<br>— <em>step</em>（步骤）：每个 job 由多个 step 构成，一步步完成。</li>
<li><em>action</em> （动作）：每个 step 可以依次执行一个或多个命令（action）。</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre><code>我的博客是有三个仓库 一个私有的博客主题文件仓库（NexT主题，fork后自己拉分支更新自己的配置）， 一个私有的博客源文件仓库， 使用git submodule 引用自己的私有主题仓库。 一个公有的github Page 仓库。

需要获取一个GitHub Personal Access Token 用来推送构建好的文件到公有的 GitHub Pages仓库, PAT(Personal Access Token)的创建过程：
点击 GitHub 用户设置页面 最下方的 Developer setting ，然后选择 Personal access tokens 来生成一个 token，由于我们只需要能够对普通仓库 push 就行了，所以把 repo 部分勾上即可。</code></pre><blockquote>
<p>Ps: 生成的 token 只会显示一次，一定要及时保存下来，否则就只能删除重新创建了</p>
</blockquote>
<pre><code>创建两个安全环境变量: 点开博客源文件仓库上方的 Settings，点到左侧的 Secrets 项，添加两个环境变量 GH_REF 、GH_TOKEN，值分别填写自己的 GitHub Pages 仓库地址（不包含 https:// ）和刚刚申请到的PAT</code></pre><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><pre><code>准备工作做好之后就可以写GitHub Actions 配置文件了。</code></pre><h3 id="触发条件和运行环境"><a href="#触发条件和运行环境" class="headerlink" title="触发条件和运行环境"></a>触发条件和运行环境</h3><pre><code>设置在master分支上push操作的时候触发构建部署动作 使用最新的 Ubuntu 系统作为编译部署的环境，同时设置一个全局环境变量将时区修改为 Asia/Shanghai，具体的配置部分为：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: MyBlog CI&#x2F;CD</span><br><span class="line">  </span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: </span><br><span class="line">      - master</span><br><span class="line">env:</span><br><span class="line">  TZ: Asia&#x2F;Shanghai</span><br><span class="line">  </span><br><span class="line">jobs:</span><br><span class="line">  blog-cicd:</span><br><span class="line">    name: Hexo blog build &amp; deploy</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    </span><br><span class="line">steps:</span><br><span class="line">............</span><br></pre></td></tr></table></figure></code></pre><h3 id="检出代码和submodule"><a href="#检出代码和submodule" class="headerlink" title="检出代码和submodule"></a>检出代码和submodule</h3><pre><code>由于我的主题文件是私有仓库，需要在检出的时候使用PAT。另外，.gitmodules文件中的url要是https格式而非ssh格式
[参考这个issue](https://github.com/actions/checkout/issues/116),[还有这个社区文档](https://github.community/t5/GitHub-Actions/How-to-checkout-a-private-submodule-from-a-github-action/td-p/33803)
具体配置部分为：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steps:</span><br><span class="line">- name: Checkout codes</span><br><span class="line">  uses: actions&#x2F;checkout@v2</span><br><span class="line"></span><br><span class="line">- name: Checkout Private submodules</span><br><span class="line">  uses: actions&#x2F;checkout@v2</span><br><span class="line">  with:</span><br><span class="line">    repository: yangfan16&#x2F;hexo-theme-next</span><br><span class="line">    token: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">    path: themes&#x2F;next</span><br><span class="line">    </span><br><span class="line"> ............</span><br></pre></td></tr></table></figure></code></pre><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code>官方不建议直接缓存 node_modules 目录，所以这里设置的是 npm 的下载缓存目录 ~/.npm，这样后面仍需要使用 npm install 来安装依赖。
使用的是 package-lock.json 文件的 hash 值来标识缓存是否可以命中，避免每次都要重新下载，从而加快构建速度。 除此之外使用gulp压缩混淆前端代码。
具体的配置部分:

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> - name: Setup node</span><br><span class="line"> uses: actions&#x2F;setup-node@v1</span><br><span class="line"> with:</span><br><span class="line">   node-version: &#39;13.x&#39;</span><br><span class="line"></span><br><span class="line"> - name: Cache node modules</span><br><span class="line"> uses: actions&#x2F;cache@v1</span><br><span class="line"> with:</span><br><span class="line">     path: ~&#x2F;.npm</span><br><span class="line">     key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#39;**&#x2F;package-lock.json&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"> - name: Install dependencies</span><br><span class="line"> run: |</span><br><span class="line">   npm install hexo-cli gulp -g</span><br><span class="line">   npm install</span><br><span class="line"></span><br><span class="line"> - name: Generate files</span><br><span class="line"> run: hexo clean &amp;&amp; hexo generate</span><br><span class="line"></span><br><span class="line"> - name: Execute gulp task</span><br><span class="line"> run:  gulp</span><br><span class="line">............</span><br></pre></td></tr></table></figure></code></pre><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><pre><code>网上的解决方案大多是生成SSH and GPG keys 然后在配置文件中加载私钥。 步骤繁杂，配置文件中一堆手写ssh密钥，不安全也不优雅，需要先安装Hexo的环境，
我这边直接clone代码，然后push到我的Github Pages私有仓库文件里，具体的配置部分为：

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- name: Deploy blog</span><br><span class="line">run: |</span><br><span class="line">  git clone &quot;https:&#x2F;&#x2F;$&#123;&#123; secrets.GH_REF &#125;&#125;&quot; deploy_git</span><br><span class="line">  mv .&#x2F;deploy_git&#x2F;.git .&#x2F;public&#x2F;</span><br><span class="line">  cd .&#x2F;public</span><br><span class="line">  git config user.name &quot;yangfan&quot;</span><br><span class="line">  git config user.email &quot;yangfan9915@gmail.com&quot;</span><br><span class="line">  git add .</span><br><span class="line">  git commit -m &quot;GitHub Actions Auto Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;</span><br><span class="line">  git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@$&#123;&#123; secrets.GH_REF &#125;&#125;&quot; master:master</span><br></pre></td></tr></table></figure></code></pre><h3 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: MyBlog CI&#x2F;CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: </span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia&#x2F;Shanghai</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  blog-cicd:</span><br><span class="line">    name: Hexo blog build &amp; deploy</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout codes</span><br><span class="line">      uses: actions&#x2F;checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Checkout Private submodules</span><br><span class="line">      uses: actions&#x2F;checkout@v2</span><br><span class="line">      with:</span><br><span class="line">        repository: yangfan16&#x2F;hexo-theme-next</span><br><span class="line">        token: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">        path: themes&#x2F;next</span><br><span class="line">      </span><br><span class="line">    - name: Setup node</span><br><span class="line">      uses: actions&#x2F;setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: &#39;13.x&#39;</span><br><span class="line"></span><br><span class="line">    - name: Cache node modules</span><br><span class="line">      uses: actions&#x2F;cache@v1</span><br><span class="line">      with:</span><br><span class="line">        path: ~&#x2F;.npm</span><br><span class="line">        key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#39;**&#x2F;package-lock.json&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli gulp -g</span><br><span class="line">        npm install</span><br><span class="line"></span><br><span class="line">    - name: Generate files</span><br><span class="line">      run: hexo clean &amp;&amp; hexo generate</span><br><span class="line"></span><br><span class="line">    - name: Execute gulp task</span><br><span class="line">      run:  gulp</span><br><span class="line"></span><br><span class="line">    - name: Deploy blog</span><br><span class="line">      run: |</span><br><span class="line">        git clone &quot;https:&#x2F;&#x2F;$&#123;&#123; secrets.GH_REF &#125;&#125;&quot; deploy_git</span><br><span class="line">        mv .&#x2F;deploy_git&#x2F;.git .&#x2F;public&#x2F;</span><br><span class="line">        cd .&#x2F;public</span><br><span class="line">        git config user.name &quot;yangfan&quot;</span><br><span class="line">        git config user.email &quot;yangfan9915@gmail.com&quot;</span><br><span class="line">        git add .</span><br><span class="line">        git commit -m &quot;GitHub Actions Auto Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;</span><br><span class="line">        git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@$&#123;&#123; secrets.GH_REF &#125;&#125;&quot; master:master</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将博客的构建部署方式更换为Github Actions之后非常方便，有问题排查也很方便，到目前为止，感觉还是比较舒服的</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Git Submdule 分离Hexo主题</title>
    <url>/hexo/use-sub-theme/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 博客应该与其主题进行分离，需要更新主题，或者使用的评论，分享组件不可用，只需要做很小的改动</p>
</blockquote>
<p>更重要的是，将代码copy到博客目录中，随博客一起推至Github等代码托管平台，但是Theme中的配置文件一同推了上去，其中包括不少appID,AK,SK这样的信息（例如leancloud）， 这些影响都是灾难级的。</p>
<p>使用Git Submodule 能够很好地解决这些问题 ，对主题进行单独的管理，使之成为一个单独的部件， 非常的棒！</p>
<a id="more"></a>

<blockquote>
<p>Ps: 这是我19年9月写的,之前博客域名过期，趁着春节将博客内容进行迁移，离本文记录时间已经过去了一段时间，请谨慎参考。</p>
</blockquote>
<h2 id="关于Git-Submodule"><a href="#关于Git-Submodule" class="headerlink" title="关于Git Submodule"></a>关于Git Submodule</h2><p>官方文档给出了非常详解的解释和用例，我们在生产中也有不少用到的地方; <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">具体请移步这里</a> , 在此不做赘述。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在本地Clone主题文件(以NexT主题为例): </span><br><span class="line">cd $&#123;hexo&#125;  &#x2F;&#x2F;进入到Hexo的目录</span><br><span class="line">git submodule add https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更新 _config.yml 使用NexT的主题</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>此时就拥有了两个仓库，一个是Hexo的，一个是NexT主题的，后者只有拉取并无修改的权限，且其中包含一些信息并不适合推入Github公有仓库，建立一个私有仓库是比较合适的（GitHub放开了私有仓库，后面准备用Travis CI，就不考虑GitLab了)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $&#123;hexo&#125;&#x2F;themes&#x2F;next  &#x2F;&#x2F;进入到子模块</span><br><span class="line">&#x2F;&#x2F;$&#123;github&#125; 单独去一个远程仓库的名称，默认是origin  既然在github上，我就设置为github</span><br><span class="line">git remote add $&#123;github&#125; git@github.com:$&#123;you_github_name&#125;&#x2F;$&#123;hexo-theme-next&#125;.git  &#x2F;&#x2F;$&#123;hexo-theme-next&#125; 是指你建立的私有的主题仓库名</span><br><span class="line">git push -u $&#123;github&#125; master</span><br></pre></td></tr></table></figure>

<p>拉取一个新的分支，并在上面进行自己的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b $&#123;release&#125;</span><br><span class="line">&#x2F;&#x2F; 对主题进行个性化的修改和配置，增加第三方的插件，[具体请参考官方文档](https:&#x2F;&#x2F;hexo-theme-next.netlify.com&#x2F;docs&#x2F;)</span><br><span class="line">&#x2F;&#x2F;与本文主题无关，先行略过</span><br><span class="line">git push -u $&#123;github&#125; $&#123;release&#125;</span><br></pre></td></tr></table></figure>

<p>打开.gitmodule 文件，将其中的URL改为自己的仓库，并指定使用分支为release分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   [submodule &quot;themes&#x2F;next&quot;]</span><br><span class="line">path &#x3D; themes&#x2F;next</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;$&#123;github_name&#125;&#x2F;$&#123;git_repo_name&#125;</span><br><span class="line">branch &#x3D; release</span><br></pre></td></tr></table></figure>

<p>通过以上简单的修改，可以将Hexo的主题与博客分离出来，使用私有仓库免去秘钥信息的泄漏，觉得上传到远程托管平台就不安全的话，可以单独生成线上使用的配置文件，就没有必要使用私有仓库。 </p>
<p>当然，这样的也有一点问题，升级原来的主题的时候可能会有冲突，在自己的分支上合并master分支的代码,可能需要手动解决。 总体来说还是比较值得的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>尽可能的将单独的模块分离出来，升级维护都是很方便的事情，也是编码的常见操作。安全问题很容易被忽略,任何秘钥的信息都不应该由自己主动泄漏出去。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
